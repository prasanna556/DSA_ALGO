Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
Example 2:

Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]

Solution:

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        return kSum(nums, 4, target, 0);
    }

    public ArrayList<List<Integer>> kSum(int[] arr, int k, long target, int index) {
        ArrayList<List<Integer>> list = new ArrayList<>();
        if (k == 2) {
            int start = index;
            int end = arr.length - 1;
            while (start < end) {
                long sum = (long) arr[start] + (long) arr[end];
                if (sum == target) {
                    List<Integer> l = new ArrayList<>();
                    l.add(arr[start]);
                    l.add(arr[end]);
                    list.add(l);
                    start++;
                    end--;
                    while (start < end && arr[start] == arr[start - 1]) {
                        start++;
                    }
                } else if (sum > target) {
                    end--;
                } else {
                    start++;
                }
            }
        } else {
            for (int i = index; i < arr.length - k + 1; i++) {
                if (i > index && arr[i] == arr[i - 1]) {
                    continue;
                }
                ArrayList<List<Integer>> temp = kSum(arr, k - 1, target - arr[i], i + 1);
                if (temp != null) {
                    for (List<Integer> l : temp) {
                        l.add(0, arr[i]);
                    }
                }
                list.addAll(temp);
            }
        }
        return list;

    }
}
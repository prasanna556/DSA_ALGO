Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.


Solution:

class Solution {
    public List<List<Integer>> threeSum(int[] arr) {
        List<List<Integer>> list = new ArrayList<>();
        Arrays.sort(arr);
        for(int i=0;i<arr.length-2;i++) {
            if(i>0 && arr[i] == arr[i-1]) {
                continue;
            }
            int s = i+1;
            int e = arr.length-1;
            while(s<e) {
                int sum = arr[i] + arr[s] + arr[e];
                if(sum == 0) {
                    List<Integer> l = new ArrayList<>();
                    l.add(arr[i]);
                    l.add(arr[s]);
                    l.add(arr[e]);
                    list.add(l);
                    s++;
                    e--;
                    while(s<e && arr[s] == arr[s-1]) {
                        s++;
                    }
                } else if(sum > 0) {
                    e--;
                } else {
                    s++;
                }
            }

            
        }
        return list;
    }
}
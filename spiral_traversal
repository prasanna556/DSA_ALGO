Binary Tree Zigzag Level Order Traversal

Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

 Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []


class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if(root == null){
            return result;
        }
        ArrayDeque<TreeNode> dq = new ArrayDeque<>();
        dq.add(root);
        boolean flag = false;
        while(!dq.isEmpty()){
            int size = dq.size();
            List<Integer> list = new ArrayList<>();
            for(int i=0;i<size;i++){
                if(flag){
                    TreeNode current = dq.removeFirst();

                    if(current.right != null){
                        dq.addLast(current.right);
                    }
                    if(current.left != null){
                        dq.addLast(current.left);
                    }
                    list.add(current.val);


                }else{
                    TreeNode current = dq.removeLast();

                    if(current.left != null) {
                        dq.addFirst(current.left);
                    }
                    if(current.right != null) {
                        dq.addFirst(current.right);
                    }
                    list.add(current.val);
                }
            }
           flag = !flag;
           result.add(list);
        }
        return result;
    }
}
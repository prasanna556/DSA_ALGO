class Solution
{
    
    static int Prec(char ch)
    {
        switch (ch)
        {
        case '+':
        case '-':
            return 1;
     
        case '*':
        case '/':
            return 2;
     
        case '^':
            return 3;
        case '(':
            return 0;
        }
        return -1;
    }
            
    //Function to convert an infix expression to a postfix expression.
	public static String infixToPostfix(String exp) 
	{
		StringBuilder result = new StringBuilder();
		
		char[] chars = exp.toCharArray();
		
		Stack<Character> stack = new Stack<>();
		
		 
        		
		for(int i=0;i<chars.length;i++){
		    if(Character.isLetterOrDigit(chars[i])){
		        result.append(chars[i]);
		    } else if(chars[i] == ')'){
		        while(stack.peek() != '('){
		            result.append(stack.pop());
		        }
		        stack.pop();
		    }else if(chars[i] == '('){
		        stack.push(chars[i]);
		    }else{
		        while(!stack.isEmpty() && Prec(chars[i])<=Prec(stack.peek())){
		            result.append(stack.pop());
		        }
		        stack.push(chars[i]);
		    }
		}
		
		while(!stack.isEmpty()){
		    result.append(stack.pop());
		}
		
		
		return result.toString();
	} 
}
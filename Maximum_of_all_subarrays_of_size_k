Given an array arr[] of size N and an integer K. Find the maximum for each and every contiguous subarray of size K.

Example 1:

Input:
N = 9, K = 3
arr[] = 1 2 3 1 4 5 2 3 6
Output: 
3 3 4 5 5 5 6 
Explanation: 
1st contiguous subarray = {1 2 3} Max = 3
2nd contiguous subarray = {2 3 1} Max = 3
3rd contiguous subarray = {3 1 4} Max = 4
4th contiguous subarray = {1 4 5} Max = 5
5th contiguous subarray = {4 5 2} Max = 5
6th contiguous subarray = {5 2 3} Max = 5
7th contiguous subarray = {2 3 6} Max = 6



class Solution
{
    //Function to find maximum of each subarray of size k.
    static ArrayList <Integer> max_of_subarrays(int arr[], int n, int k)
    {
        ArrayDeque<Integer> ad = new ArrayDeque<>();
        ArrayList<Integer> result = new ArrayList<>();
        
        for(int i=0;i<k;i++){
            while(!ad.isEmpty() && arr[ad.peekLast()]<arr[i]){
                ad.removeLast();
            }
            ad.addLast(i);
        }
        result.add(arr[ad.peekFirst()]);
        
        for(int j=k;j<n;j++){
            while(!ad.isEmpty() && arr[ad.peekLast()]<arr[j]){
                ad.removeLast();
            }
            
            ad.addLast(j);
            
            if(ad.peekFirst()<=(j-k)){
                ad.removeFirst();
            }
            result.add(arr[ad.peekFirst()]);
        }
        
        return result;
    }
    
    
    
}
Equilibrium Index/Find Pivot Index


Given an array of integers nums, calculate the pivot index of this array.

The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.

If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.

Return the leftmost pivot index. If no such index exists, return -1.

 

Example 1:

Input: nums = [1,7,3,6,5,6]
Output: 3
Explanation:
The pivot index is 3.
Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11
Right sum = nums[4] + nums[5] = 5 + 6 = 11
Example 2:

Input: nums = [1,2,3]
Output: -1
Explanation:
There is no index that satisfies the conditions in the problem statement.
Example 3:

Input: nums = [2,1,-1]
Output: 0
Explanation:
The pivot index is 0.
Left sum = 0 (no elements to the left of index 0)
Right sum = nums[1] + nums[2] = 1 + -1 = 0
 

Constraints:

1 <= nums.length <= 104
-1000 <= nums[i] <= 1000



Prefix Sums
We can even skip the prefix sum array and replace it with some variables. Consider the fact that when we are checking the index i to be equilibrium index, we are only interested in prefSum[i] and not any other value. This observation will help us to reduce the space complexity to O(1).
Let arraySum be the sum of the array and leftSum = 0, which will denote the sum of elements to the left of index i.
Now for i = 0 to i = n - 1, as we move from left to right do leftSum = leftSum + arr[i].
The sum of elements to the right of i can be found as rightSum = arraySum - leftSum - arr[i].
If we have leftSum = rightSum, then return i.
After the loop is ended, return -1, since no such index exists.
Time Complexity
O(N), where N is the size of the array.

Space Complexity
O(1), as we are using constant extra memory.



import java.util.* ;
import java.io.*; 

public class Solution {

	public static int arrayEquilibriumIndex(int[] arr){  
		int total = 0;
		int prefixSum = 0;
		int rightSum = 0;
		if (arr.length == 1) {
			return -1;
		}

		for(int ele:arr) {
			total += ele;
		}

		for (int i=0;i<arr.length;i++) {
			rightSum = total-prefixSum-arr[i];
			if(rightSum == prefixSum) {
				return i;
			}
			prefixSum += arr[i];
		}

		return -1;
	}
}
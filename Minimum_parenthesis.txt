Problem statement
Given a string "pattern", which contains only two types of characters ‘(’, ‘)’.

Your task is to find the minimum number of parentheses either ‘(’, ‘)’ we must add the parentheses in string ‘pattern’ and the resulted string is valid.

Condition for valid string-

Every opening parenthesis ‘(’ must have a correct closing parenthesis ‘)’.

Example - ‘(()(()))’, ‘()()()’, ‘((()))’ are valid string, and ‘(((’, ‘(()’, ‘)(())’ are invalid string.

Constraints:
1 <= T <= 50
1 <= N <= 10^4

Where ‘T’ is the total number of test cases, ‘N’ denotes the length of string "pattern".

Time limit: 1 second
Sample Input 1:
2
)((()
((
Sample Output 1:
3
2

Sample Input 2:
2
(((((
))(
Sample Output 2:
5
3


import java.util.* ;
import java.io.*; 
public class Solution {
	public static int minimumParentheses(String pattern) {
		char[] arr = pattern.toCharArray();
		int result = 0;
		int count = 0;

		for (int i=0;i<arr.length;i++) {
			if (arr[i] == ')') {
				if (--count < 0) {
					result++;
					count = 0;
				}
			} else {
				count++;
			}
		}

		result +=count;

		return result;
		
	}
}
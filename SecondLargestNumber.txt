Problem statement
You have been given an array/list 'ARR' of integers. Your task is to find the second largest element present in the 'ARR'.

Note:
a) Duplicate elements may be present.

b) If no such element is present return -1.
Example:
Input: Given a sequence of five numbers 2, 4, 5, 6, 8.

Output:  6

Explanation:
In the given sequence of numbers, number 8 is the largest element, followed by number 6 which is the second-largest element. Hence we return number 6 which is the second-largest element in the sequence.
Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1 <= T <= 100
1 <= N <= 5000
-10 ^ 9 <= 'SIZE' <= 10 ^ 9 

Where ‘T’ is the total number of test cases, ‘N’ denotes the number of elements in the array and ‘SIZE’ denotes the range of the elements in the array.

Time limit: 1 sec.
Sample Input 1:
2
6
12 1 35 10 34 1
5
10 10 10 10 10
Sample Output 1:
34
-1
Explanation of sample input 1:
Test case 1: In the given sequence of numbers, number 35 is the largest element, followed by number 34 which is the second-largest element. Hence we return number 34 which is the second-largest element in the sequence.

Test case 2: In the given sequence of numbers, number 10 is the largest element. However, since all the elements are the same, the second largest element does not exist. So, we return -1.
Sample Input 2:
1
6
7 8 8 1 4 3 
Sample Output 2:
7
Explanation of sample input 2:
In the given sequence of numbers, 8 exists two times and is the largest element, followed by 7 which is the second-largest element. Hence we return the number 7 as the second-largest element.


The idea is to traverse the array once, check every element for the larger element, and store the previous largest element in a variable which will be our answer.

 

Initialize two variables ‘FIRSTLARGEST’ and 'SECONDLARGEST' to ‘INT_MIN’.
Start traversing the array.
If the current element in the array say ‘ARR['I']’ is greater than first.
Then update ‘FIRSTLARGEST’ and 'SECONDLARGEST' as, 'SECONDLARGEST'='FIRSTLARGEST' and 'FIRSTLARGEST' = ARR['I'].
If the current element is in between first and second, then update 'SECONDLARGEST' to store the value of the current variable as 'SECONDLARGEST' = ARR['I'].
Return the value stored in variable 'SECONDLARGEST'.
If 'SECONDLARGEST' is still equal to ‘INT_MIN’, that is, no second largest element exists, return -1.
Time Complexity
O(N), where ‘N’ is the total number of elements in the array.

 

The array is traversed once.

Space Complexity
O(1).

 

As it uses constant space.




import java.util.* ;
import java.io.*; 
public class Solution {
	public static int findSecondLargest(int n, int[] arr) {
		int max = Integer.MIN_VALUE;
		int secondMax = Integer.MIN_VALUE;

		if (n < 2) {
			return -1;
		}
		for (int i = 0; i < n ; i++) {
			if (arr[i] == max) {
				continue;
			} else if (arr[i] > max) {
				secondMax = max;
				max = arr[i];
			} else if (arr[i] > secondMax) {
				secondMax = arr[i];
			}
		}
		if (secondMax == Integer.MIN_VALUE) {
			return -1;
		}
		return secondMax;
	}
}